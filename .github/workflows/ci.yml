name: CI

on:
  push:
    branches:
      - '**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: kameshcodes/reviews-sentiment-analysis-project-sentiment_app
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    env:
      HEALTH_CHECK_RETRIES: 2
      HEALTH_CHECK_INTERVAL: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.1'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 coverage

      - name: Run linter
        run: flake8 .

      - name: Upload linting results
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: flake8-report.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: myapp:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Wait for health check
        run: |
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker-compose ps -q app))
            if [ "$STATUS" == "healthy" ]; then
              echo "Container is healthy"
              exit 0
            else
              echo "Waiting for container to be healthy..."
              sleep ${{ env.HEALTH_CHECK_INTERVAL }}
            fi
          done
          echo "Container failed to become healthy"
          docker-compose logs app
          exit 1

      - name: Run tests with coverage
        run: |
          docker-compose exec app coverage run -m pytest
          docker-compose exec app coverage xml -o coverage.xml

      - name: Upload test and coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage.xml

      - name: Tear down Docker Compose
        run: docker-compose down --volumes --remove-orphans

      - name: Cleanup Docker resources
        run: |
          docker system prune -af --volumes
