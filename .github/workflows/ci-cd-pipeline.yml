name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t kameshcodes/sentiment-analysis-webapp:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push kameshcodes/sentiment-analysis-webapp:latest

      - name: Cleanup Docker
        run: |
          docker system prune -f --volumes

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=myapp" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -n "$INSTANCE_ID" ]; then
            echo "Existing instance found: $INSTANCE_ID"
          else
            echo "No existing instance found. Creating a new one."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-052c08d70def0ac62 \
              --count 1 \
              --instance-type t2.micro \
              --key-name MyKeyPair \
              --security-group-ids sg-0a1234567890abcdef \
              --subnet-id subnet-6e7f829e \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Project,Value=myapp}]' \
              --query 'Instances[0].InstanceId' --output text)
          fi
          echo "::set-output name=instance_id::$INSTANCE_ID"

      - name: Wait for EC2 instance to be running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ steps.check_instance.outputs.instance_id }}

      - name: Get EC2 public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ steps.check_instance.outputs.instance_id }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "::set-output name=public_ip::$PUBLIC_IP"

      - name: Deploy Docker image to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i MyKeyPair.pem ec2-user@${{ steps.get_ip.outputs.public_ip }} << 'EOF'
            set -e
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_PASSWORD }}"
            docker pull kameshcodes/sentiment-analysis-webapp:latest
            if [ \$(docker ps -q -f name=sentiment-app) ]; then
              docker stop sentiment-app
              docker rm sentiment-app
            fi
            docker run -d --name sentiment-app -p 8502:8502 kameshcodes/sentiment-analysis-webapp:latest
          EOF

      - name: Report EC2 public IP
        run: |
          echo "Application is running at http://${{ steps.get_ip.outputs.public_ip }}:8502"